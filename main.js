// Generated by CoffeeScript 1.12.4
(function() {
  var Gist, bind, isToken, loggedIn, login, main, preview, sidebar, store;

  bind = rx.bind;

  rx.rxt.importTags();


  /*
   * Utility
   */

  store = {
    key: 'gists-auth',
    get: function() {
      return localStorage.getItem(this.key);
    },
    set: function(val) {
      return localStorage.setItem(this.key, val);
    },
    remove: function() {
      return delete localStorage[this.key];
    }
  };


  /*
   * Basic Data Type
   */

  Gist = (function() {
    function Gist(id, desc, files) {
      this.id = id;
      this.desc = desc;
      this.files = files;
    }

    return Gist;

  })();


  /*
   * Component
   */

  sidebar = function(args) {
    var currentGist, gists;
    gists = args.gists;
    currentGist = args.currentGist;
    return div({
      "class": 'sidebar'
    }, [
      ul({}, gists.map(function(g) {
        return li({
          "class": "" + (g === currentGist.get() ? 'selected' : ''),
          click: function() {
            return currentGist.set(g);
          }
        }, (function() {
          var keys;
          keys = Object.keys(g.files);
          return [
            p({}, [
              span({
                "class": 'list-filename'
              }, g.files[keys[0]].filename), br(), span({
                "class": 'list-filedesc'
              }, g.desc)
            ])
          ];
        })());
      }))
    ]);
  };


  /*
   * Component
   */

  preview = function(args) {
    var currentGist, gists;
    gists = args.gists;
    currentGist = args.currentGist;
    return div({
      "class": 'preview'
    }, [
      h3({}, bind(function() {
        return currentGist.get().desc;
      })), div({}, bind(function() {
        var file, fileName, ref, results;
        ref = currentGist.get().files;
        results = [];
        for (fileName in ref) {
          file = ref[fileName];
          results.push((function(fileName, file) {
            var $code, fileContent;
            fileContent = rx.cell('');
            fileContent.onSet.sub(function() {
              return setTimeout(function() {
                return $('pre code').each(function(i, block) {
                  return hljs.highlightBlock(block);
                });
              }, 0);
            });
            $.ajax({
              url: file.raw_url,
              success: function(data) {
                return fileContent.set(data);
              }
            });
            return div({}, [
              i({
                click: function() {
                  return $code.slideToggle('fast');
                }
              }, fileName), pre({}, [
                $code = code({
                  "class": "" + (file.language != null ? file.language.toLowerCase() : void 0)
                }, bind(function() {
                  return fileContent.get();
                }))
              ])
            ]);
          })(fileName, file));
        }
        return results;
      }))
    ]);
  };


  /*
   * Component
   */

  isToken = rx.cell(store.get() != null);

  loggedIn = bind(function() {
    return isToken.get();
  });

  login = function(args) {
    return div({
      "class": 'auth-section'
    }, bind(function() {
      var $input;
      if (!loggedIn.get()) {
        return [
          $input = input({
            type: 'text',
            placeholder: 'paste your token here'
          }), ' ', a({
            href: "#",
            click: function() {
              var val;
              val = $input.rx('val').get();
              store.set(val);
              return isToken.set(true);
            }
          }, 'login')
        ];
      } else {
        return a({
          href: '#',
          click: function() {
            store.remove();
            return isToken.set(false);
          }
        }, 'logout');
      }
    }));
  };


  /*
   * Root Entry
   */

  main = function(args) {
    var $base, currentGist, displayName, err, fetching, gistsAll, loadFromGithub;
    gistsAll = rx.array([]);
    currentGist = rx.cell("loading...", "loading", {
      "filename": {
        "language": "javascript"
      }
    });
    fetching = rx.cell(false);
    err = rx.cell(false);
    displayName = rx.cell('');
    loadFromGithub = function(name) {
      fetching.set(true);
      err.set(false);
      displayName.set(name);
      return $.ajax({
        url: "https://api.github.com/users/" + name + "/gists",
        success: function(data) {
          gistsAll.replace(data.map(function(g) {
            return new Gist(g.id, g.description, g.files);
          }));
          return currentGist.set(gistsAll.at(0));
        },
        error: function() {
          return err.set(true);
        },
        "finally": function() {
          return fetching.set(false);
        }
      });
    };
    loadFromGithub('drbelfast');
    $base = div({
      "class": 'hi'
    }, [
      h2('Auth'), login({}), hr(), h2(bind(function() {
        if (loggedIn.get()) {
          return 'Private Panel';
        } else {
          return 'Public Interface';
        }
      })), div({}, [
        input({
          type: 'text',
          placeholder: 'type username',
          autofocus: true,
          keydown: function(e) {
            var name;
            if (e.which === 13) {
              name = this.val().trim();
              if (name.length === 0) {
                return;
              }
              return loadFromGithub(name);
            }
          }
        })
      ]), p({}, bind(function() {
        return (displayName.get()) + "'s gists";
      })), div({
        "class": 'container'
      }, bind(function() {
        if (err.get()) {
          return [div('no user exists')];
        } else {
          if (gistsAll.length() > 0) {
            return [
              sidebar({
                gists: gistsAll,
                currentGist: currentGist
              }), preview({
                gists: gistsAll,
                currentGist: currentGist
              })
            ];
          } else {
            if (fetching.get()) {
              return [div({}, 'fetching...')];
            } else {
              return [div({}, '')];
            }
          }
        }
      }))
    ]);
    return $base;
  };

  $('body').append(main);

}).call(this);
